
Course*Modelling and Simulation*Mechatronics*System;
# 
# DAE library
# 

with(LinearAlgebra):
# Index Reduction using Library
# Compute the kernel of a transpose of matrix by using LU decomposition
KernelBuild := proc( E )
  local P, L, U, r, k, j, all0, LP;

  # decompose the matrix as E = P * L * U
  P, L, U := LUDecomposition(E);

  # the rank can be deduced from LU decomposition,
  # by counting the row of U that are zeros
  r := 0;
  for k from 1 to RowDimension(U) do
    all0 := true;
    for j from 1 to ColumnDimension(U) do
      if U[k,j] <> 0 then
        all0 := false;
        break;
      end;
    end;
    if all0 then
      break;
    end;
    r := k;
  end;

  # matrix ( 0, I ) where 0 id of dimension r x r has the property
  # ( 0, I ) * U = 0

  # Matrix L^(-1) * P^T * ( 0, I ) has the property 
  # L^(-1) * P^T * ( 0, I ) * E = ( 0, I ) * U

  # compute L^(-1).P^T
  LP := LinearSolve( L, Transpose(P) );

  # the last columns of LP are in the kernel the first r columns
  # complete the kernel to a base

  return LP[r+1..-1,1..-1], LP[1..r,1..-1]; # K and L
end proc:
# to check the script
#M := <<1,2,3>|<1,2,3>>;
#K, L := KernelBuild(M);
#K.M;L.M
# Given the DAE:
# 
# E(x,t) x' = G(x,t)
# 
# compsute the matrix K(x,t) e L(x,t) such that
# 
# K(x,t)E(x,t) = 0 so that K(x,t)G(x,t) = A(x,t) hidden constraint
# 
# and
# 
# L(x,t)E(x,t)x' = L(x,t)G(x,t) is the differential part
# 
# the routine return:
# 
# E1(x,t) = L(x,t)E(x,t)
# G1(x,t) = L(x,t)G(x,t)
# A(x,t) =  K(x,t)G(x,t)
HiddenConstraints := proc( E, G )
  local K, L;
  K, L := KernelBuild( E );
  return L.E, L.G, K.G; # E1, G1, A
end proc:
# GIven a DAE as a list of equation 
# 
# E(x,t) x' = G(x,t)
# 
# return a new DAE
# 
# E1(x,t) x' = G1(x,t)
# 
# and the hidden constraint
# 
# A(x,t) = 0
# 
# where the new DAE and index reduced by one.
# If the DAE is an ODE returned A(x,t) is empty
DAEreduceBy1TheIndex := proc( E, G, Dvars )
  local E1, G1, E2, G2, ALG, DALG;
  # find hidden constraint
  E1, G1, ALG := HiddenConstraints( E, G );

  # Separate Algebraic and Differential part
  DALG := diff( ALG, t );


  # E2*Dvars-G2 = DALG
  E2, G2 := GenerateMatrix( convert(DALG,list), Dvars );

  # Build the modified DAE, by substituting the algebraic equation(s)
  # with the derivative of the algebraic equation(s)
  return <E1,E2>, <G1,G2>, ALG;
end proc:
DAEreduceBy1TheIndexBis := proc( EQS, Dvars )
  local E, G, E1, G1, ALG, DALG;
  # E*Dvars-G = EQS
  E, G        := GenerateMatrix( EQS, Dvars ):
  E1, G1, ALG := DAEreduceBy1TheIndex( E, G, Dvars ):
  return convert(convert(E1.<Dvars>,Vector)-convert(G1,Vector),list), ALG;
end proc:
DIFF := proc( F, V )
  local __tmp;
  subs(__tmp=V,diff(subs(V=__tmp,F),__tmp));
end proc:
JACOBIAN := proc( F, vars )
  local i, j, nr, nc, JAC;
  nr  := nops(F);
  nc  := nops(vars);
  JAC := Matrix(nr,nc);
  for i from 1 to nr do
    for j from 1 to nc do
      JAC[i,j] := DIFF(F[i],vars[j]);
    end;
  end;
  JAC;
end proc:
# Evaluate invariants for INDEX-3 DAE

# q' = v
# M(q,t) v' + Phi_q^T lambda = gfun( q, v, t )
# Phi( q, t ) = 0
# 
DAEindex3ToODE := proc( Mass, Phi, gfun, qvars, vvars )
  local i, n, m, q_D, v_D, v_dot, SUBS, SUBS0, SUBSD, A, B, Phi_P, H, W;
  n     := nops( qvars );
  m     := nops( Phi );
  q_D   := map( diff, qvars, t );
  v_D   := map( diff, vvars, t );
  v_dot := map( map( cat, map2( op, 0, vvars ), _dot ), (t) );
  SUBS  := zip( (x,y)-> x = y, q_D, vvars );
  SUBS0 := seq( v_D[i] = 0, i=1..n );
  SUBSD := seq( v_dot[i] = diff(vvars[i],t), i=1..n );
  A     := subs( SUBS, diff(Phi,t) );
  B     := -subs( SUBS0, subs( SUBS, diff(A,t) ) );
  Phi_P := JACOBIAN( Phi, qvars );
  print(Phi);
  print(Phi_P);
  H     := convert(<op(gfun)>-Mass.<op(v_dot)>-LinearAlgebra[Transpose](Phi_P).<seq(lambda||i(t),i=1..m)>,list);
  W     := convert(<op(B)>-Phi_P.<op(v_dot)>,list);
  return A, B, Phi_P, H, W;
end proc:
#Mass := <<1,0>|<0,1>>;
#Phi  := [x(t)^2+y(t)^2-1];
#gfun := [0,-m*g];
#DAEindex3ToODE( Mass, Phi, gfun, [x(t),y(t)], [u(t),v(t)] );
# Code Generation
F_TO_MATLAB := proc( F, vars, name )
  local i, str, LST, vals, vv;
  LST  := []:
  vals := "":
  for i from 1 to nops(F) do
    vv := simplify(F[i]);
    if evalb(vv <> 0) then
      LST  := [op(LST), convert("res__"||i,symbol) = vv ];
      vals := cat(vals,sprintf("  res__%s(%d) = res__%d;\n",name,i,i));
    end;
  end;
  str := CodeGeneration[Matlab](LST,optimize=true,coercetypes=false,deducetypes=false,output=string);
  printf("function res__%s = %s( vars__ )\n",name,name);
  printf("\n  %% extract states\n");
  for i from 1 to nops(vars) do
    printf("  %s = vars__(%d);\n",convert(vars[i],string),i);
  end;
  printf("\n  %% evaluate function\n");
  printf("  %s\n",StringTools[SubstituteAll](  str, "\n", "\n  " ));
  printf("\n  %% store on output\n");
  printf("  res__%s = zeros(%d,1);\n",name,nops(F));
  printf("%s\nend\n",vals);
end proc:
JF_TO_MATLAB := proc( JF, vars, name )
  local val, pat, NR, NC, i, j, str, LST;
  NR  := LinearAlgebra[RowDimension](JF);
  NC  := LinearAlgebra[ColumnDimension](JF);
  LST := []:
  pat := "";
  for i from 1 to NR do
    for j from 1 to NC do
      val := simplify(JF[i,j]);
      if evalb(val <> 0) then
        LST := [op(LST), convert("jac__"||i||_||j,symbol) = val];
        pat := cat(pat,sprintf("  jac__%s(%d,%d) = jac__%d_%d;\n",name,i,j,i,j));
      end;
    end;
  end;
  str := CodeGeneration[Matlab](LST,optimize=true,coercetypes=false,deducetypes=false,output=string);
  printf("function jac__%s = %s( vars__ )\n",name,name);
  printf("\n  %% extract states\n");
  for i from 1 to nops(vars) do
    printf("  %s = vars__(%d);\n",convert(vars[i],string),i);
  end;
  printf("\n  %% evaluate function\n");
  printf("  %s\n",StringTools[SubstituteAll](  str, "\n", "\n  " ));
  printf("\n  %% store on output\n");
  printf("  jac__%s = zeros(%d,%d);\n",name,NR,NC);
  printf("%s",pat);
  printf("end\n");
end proc:



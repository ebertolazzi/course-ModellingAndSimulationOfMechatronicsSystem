<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_spline_set_g_c_8cc" kind="file" language="C++">
    <compoundname>SplineSetGC.cc</compoundname>
    <includes refid="_splines_8hh" local="yes">Splines.hh</includes>
    <includes local="no">limits</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="7">
        <label>SplineAkima.hxx</label>
        <link refid="_spline_akima_8hxx"/>
      </node>
      <node id="24">
        <label>limits</label>
      </node>
      <node id="23">
        <label>Splines2D.hxx</label>
        <link refid="_splines2_d_8hxx"/>
      </node>
      <node id="13">
        <label>SplinePchip.hxx</label>
        <link refid="_spline_pchip_8hxx"/>
      </node>
      <node id="25">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>SplineQuintic.hxx</label>
        <link refid="_spline_quintic_8hxx"/>
      </node>
      <node id="19">
        <label>SplineBiQuintic.hxx</label>
        <link refid="_spline_bi_quintic_8hxx"/>
      </node>
      <node id="14">
        <label>SplineQuinticBase.hxx</label>
        <link refid="_spline_quintic_base_8hxx"/>
      </node>
      <node id="21">
        <label>SplineSet.hxx</label>
        <link refid="_spline_set_8hxx"/>
      </node>
      <node id="6">
        <label>fstream</label>
      </node>
      <node id="16">
        <label>SplineBilinear.hxx</label>
        <link refid="_spline_bilinear_8hxx"/>
      </node>
      <node id="1">
        <label>/Users/enrico/Ricerca/develop/C++/pins-mechatronix/LibSources/submodules/Splines/src/SplineSetGC.cc</label>
        <link refid="_spline_set_g_c_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SplineLinear.hxx</label>
        <link refid="_spline_linear_8hxx"/>
      </node>
      <node id="9">
        <label>SplineConstant.hxx</label>
        <link refid="_spline_constant_8hxx"/>
      </node>
      <node id="12">
        <label>SplineHermite.hxx</label>
        <link refid="_spline_hermite_8hxx"/>
      </node>
      <node id="5">
        <label>GenericContainer.hh</label>
      </node>
      <node id="11">
        <label>SplineCubic.hxx</label>
        <link refid="_spline_cubic_8hxx"/>
      </node>
      <node id="18">
        <label>SplineAkima2D.hxx</label>
        <link refid="_spline_akima2_d_8hxx"/>
      </node>
      <node id="20">
        <label>SplineVec.hxx</label>
        <link refid="_spline_vec_8hxx"/>
      </node>
      <node id="3">
        <label>SplinesConfig.hh</label>
        <link refid="_splines_config_8hh"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Utils.hh</label>
      </node>
      <node id="17">
        <label>SplineBiCubic.hxx</label>
        <link refid="_spline_bi_cubic_8hxx"/>
      </node>
      <node id="22">
        <label>Splines1D.hxx</label>
        <link refid="_splines1_d_8hxx"/>
      </node>
      <node id="8">
        <label>SplineBessel.hxx</label>
        <link refid="_spline_bessel_8hxx"/>
      </node>
      <node id="2">
        <label>Splines.hh</label>
        <link refid="_splines_8hh"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_splines">Splines</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*--------------------------------------------------------------------------*\</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>|<sp/><sp/>Copyright<sp/>(C)<sp/>2016<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|/<sp/><sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|/<sp/><sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>__/<sp/>_<sp/><sp/><sp/>,_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>__/<sp/>_<sp/><sp/><sp/>,_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>\|/<sp/><sp/>/<sp/><sp/>|<sp/><sp/>|<sp/><sp/><sp/>|<sp/>|<sp/><sp/><sp/>\|/<sp/><sp/>/<sp/><sp/>|<sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|(__/|__/<sp/><sp/><sp/>|_/<sp/>\_/|/|(__/|__/<sp/><sp/><sp/>|_/<sp/>\_/|/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>Enrico<sp/>Bertolazzi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>Dipartimento<sp/>di<sp/>Ingegneria<sp/>Industriale<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>Universita`<sp/>degli<sp/>Studi<sp/>di<sp/>Trento<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>email:<sp/>enrico.bertolazzi@unitn.it<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="18"><highlight class="comment">\*--------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_splines_8hh" kindref="compound">Splines.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wc++98-compat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wglobal-constructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wc++98-compat-pedantic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpoison-system-directories&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_splines" kindref="compound">Splines</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_INTEGER;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_VEC_BOOL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_VEC_INTEGER;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_VEC_REAL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_VEC_STRING;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_VECTOR;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_MAP;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::GC_MAT_REAL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::mat_real_type;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::vec_int_type;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::vec_real_type;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::vec_string_type;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::vector_type;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GenericContainerNamespace::map_type;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_splines_1_1_spline_set_1a54372dbcce6c3cfd6f3aa815642df352" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a54372dbcce6c3cfd6f3aa815642df352" kindref="member">SplineSet::setup</ref>(<sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gc<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>gc[&quot;spline_type&quot;]</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>gc[&quot;xdata&quot;]</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>gc[&quot;ydata&quot;]</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>gc[&quot;headers&quot;]<sp/>(opzionale)</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline_type_vec;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;SplineType1D&gt;<sp/><sp/>stype;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vec_real_type&gt;<sp/>Y,<sp/>Yp;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>fmt::format(<sp/></highlight><highlight class="stringliteral">&quot;SplineSet[{}]::setup(<sp/>gc<sp/>):<sp/>&quot;</highlight><highlight class="normal">,<sp/>m_name<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc.exists(</highlight><highlight class="stringliteral">&quot;spline_type&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>missing<sp/>`spline_type`<sp/>field!\n&quot;</highlight><highlight class="normal">,<sp/>msg</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>gc(</highlight><highlight class="stringliteral">&quot;spline_type&quot;</highlight><highlight class="normal">).copyto_vec_string(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spline_type_vec,<sp/>(msg+</highlight><highlight class="stringliteral">&quot;in<sp/>reading<sp/>`spline_type&apos;\n&quot;</highlight><highlight class="normal">).c_str()</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nspl<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(spline_type_vec.size());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>stype.resize(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl)<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spl<sp/>=<sp/>0;<sp/>spl<sp/>&lt;<sp/>size_t(m_nspl);<sp/>++spl<sp/>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stype[spl]<sp/>=<sp/>string_to_splineType(<sp/>spline_type_vec[spl]<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc.exists(</highlight><highlight class="stringliteral">&quot;xdata&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>missing<sp/>`xdata`<sp/>field!\n&quot;</highlight><highlight class="normal">,<sp/>msg</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>gc(</highlight><highlight class="stringliteral">&quot;xdata&quot;</highlight><highlight class="normal">).copyto_vec_real(<sp/>X,<sp/>(msg+</highlight><highlight class="stringliteral">&quot;reading<sp/>`xdata&apos;&quot;</highlight><highlight class="normal">).c_str()<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>m_npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(<sp/>X.size()<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc.exists(</highlight><highlight class="stringliteral">&quot;ydata&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>missing<sp/>`ydata`<sp/>field!\n&quot;</highlight><highlight class="normal">,<sp/>msg</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gc_ydata<sp/>=<sp/>gc(</highlight><highlight class="stringliteral">&quot;ydata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>for<sp/>_nspl<sp/>splines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>Y<sp/><sp/>.<sp/>resize(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl)<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Yp<sp/>.<sp/>resize(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl)<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>se<sp/>tipo<sp/>vettore<sp/>o<sp/>matrice<sp/>deve<sp/>esserci<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GC_MAT_REAL<sp/>==<sp/>gc_ydata.get_type()<sp/>||</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_VECTOR<sp/><sp/><sp/>==<sp/>gc_ydata.get_type()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gc.exists(</highlight><highlight class="stringliteral">&quot;headers&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>missing<sp/>`headers`<sp/>field!\n&quot;</highlight><highlight class="normal">,<sp/>msg</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gc_headers<sp/>=<sp/>gc(</highlight><highlight class="stringliteral">&quot;headers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gc_headers.copyto_vec_string(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers,<sp/>(msg+</highlight><highlight class="stringliteral">&quot;,<sp/>reading<sp/>`headers&apos;&quot;</highlight><highlight class="normal">).c_str()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers.size()<sp/>==<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>field<sp/>`headers`<sp/>expected<sp/>to<sp/>be<sp/>of<sp/>size<sp/>{}<sp/>found<sp/>of<sp/>size<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>m_nspl,<sp/>headers.size()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GC_MAT_REAL<sp/>==<sp/>gc_ydata.get_type()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leggo<sp/>matrice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mat_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data<sp/>=<sp/>gc_ydata.get_mat_real();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl)<sp/>==<sp/>data.numCols(),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>number<sp/>of<sp/>splines<sp/>[{}]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;differs<sp/>from<sp/>the<sp/>number<sp/>of<sp/>`ydata`<sp/>columns<sp/>[{}]<sp/>in<sp/>data\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>m_nspl,<sp/>data.numCols()</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_npts)<sp/>==<sp/>data.numRows(),</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>number<sp/>of<sp/>points<sp/>[{}]\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;differs<sp/>from<sp/>the<sp/>number<sp/>of<sp/>`ydata`<sp/>rows<sp/>[{}]<sp/>in<sp/>data\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>m_npts,<sp/>data.numRows()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(m_nspl);<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.getColumn(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(i),Y[i]);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GC_VECTOR<sp/>==<sp/>gc_ydata.get_type()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data<sp/>=<sp/>gc_ydata.get_vector();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl)<sp/>==<sp/>data.size(),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>field<sp/>`ydata`<sp/>expected<sp/>of<sp/>size<sp/>{}<sp/>found<sp/>of<sp/>size<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>m_nspl,<sp/>data.size()</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/>msg+</highlight><highlight class="stringliteral">&quot;<sp/>reading<sp/>`ydata`<sp/>columns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spl<sp/>=<sp/>0;<sp/>spl<sp/>&lt;<sp/>size_t(m_nspl);<sp/>++spl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>datai<sp/>=<sp/>data[spl];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>nrow<sp/>=<sp/>m_npts;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stype[spl]<sp/>==<sp/><ref refid="namespace_splines_1afebc3f20f002ddfdcbd2d725d1aa55dfa30bb7d325c1c582be9d10f81e2434671" kindref="member">CONSTANT_TYPE</ref><sp/>)<sp/>--nrow;<sp/></highlight><highlight class="comment">//<sp/>constant<sp/>spline<sp/>uses<sp/>n-1<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datai.copyto_vec_real(<sp/>Y[spl],<sp/>msg1.c_str()<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_npts)<sp/>==<sp/>Y[spl].size(),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>column<sp/>{}<sp/>of<sp/>`ydata`<sp/>expected<sp/>of<sp/>size<sp/>{}<sp/>found<sp/>of<sp/>size<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>spl,<sp/>m_npts,<sp/>Y[spl].size()</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GC_MAP<sp/>==<sp/>gc_ydata.get_type()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data<sp/>=<sp/>gc_ydata.get_map();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.size()<sp/>==<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_nspl),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>field<sp/>`ydata`<sp/>expected<sp/>of<sp/>size<sp/>{}<sp/>found<sp/>of<sp/>size<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>m_nspl,<sp/>data.size()</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>headers.clear();<sp/>headers.reserve(data.size());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_type::const_iterator<sp/>im<sp/>=<sp/>data.begin();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/>msg+</highlight><highlight class="stringliteral">&quot;<sp/>reading<sp/>`ydata`<sp/>columns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spl<sp/>=<sp/>0;<sp/>im<sp/>!=<sp/>data.end();<sp/>++im,<sp/>++spl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers.push_back(im-&gt;first);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>datai<sp/>=<sp/>im-&gt;second;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>nrow<sp/>=<sp/>m_npts;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stype[spl]<sp/>==<sp/><ref refid="namespace_splines_1afebc3f20f002ddfdcbd2d725d1aa55dfa30bb7d325c1c582be9d10f81e2434671" kindref="member">CONSTANT_TYPE</ref><sp/>)<sp/>--nrow;<sp/></highlight><highlight class="comment">//<sp/>constant<sp/>spline<sp/>uses<sp/>n-1<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datai.copyto_vec_real(<sp/>Y[spl],<sp/>msg1.c_str()<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_npts)<sp/>==<sp/>Y[spl].size(),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>column<sp/>`{}`<sp/>of<sp/>`ydata`<sp/>expected<sp/>of<sp/>size<sp/>{}<sp/>found<sp/>of<sp/>size<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>im-&gt;first,<sp/>m_npts,<sp/>Y[spl].size()</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ERROR(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>field<sp/>`data`<sp/>expected\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>be<sp/>of<sp/>type<sp/>`mat_real_type`,<sp/>`vector_type`<sp/>or<sp/>`map_type&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;found:<sp/>`{}`\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>gc_ydata.get_type_name()</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gc.exists(</highlight><highlight class="stringliteral">&quot;ypdata&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>yp<sp/>puo&apos;<sp/>essere<sp/>solo<sp/>tipo<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gc_ypdata<sp/>=<sp/>gc(</highlight><highlight class="stringliteral">&quot;ypdata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_MAP<sp/>==<sp/>gc_ypdata.get_type(),</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>field<sp/>`ypdata`<sp/>expected<sp/>to<sp/>be<sp/>of<sp/>type<sp/>`map_type`<sp/>found:<sp/>`{}`\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>gc_ypdata.get_type_name()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;string,integer&gt;<sp/>h_to_pos;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>headers.begin();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>idx<sp/>=<sp/>0;<sp/>is<sp/>!=<sp/>headers.end();<sp/>++is<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_to_pos[*is]<sp/>=<sp/>idx++;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/>msg+</highlight><highlight class="stringliteral">&quot;<sp/>reading<sp/>`ypdata`<sp/>columns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>data<sp/>=<sp/>gc_ypdata.get_map();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_type::const_iterator<sp/>im<sp/>=<sp/>data.begin();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>im<sp/>!=<sp/>data.end();<sp/>++im<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cerca<sp/>posizione</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;string,integer&gt;::iterator<sp/>is_pos<sp/>=<sp/>h_to_pos.find(im-&gt;first);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_pos<sp/>!=<sp/>h_to_pos.end(),</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>column<sp/>`{}`<sp/>of<sp/>`ypdata`<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>im-&gt;first</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>spl<sp/>=<sp/>is_pos-&gt;second;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>datai<sp/>=<sp/>im-&gt;second;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>nrow<sp/>=<sp/>m_npts;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stype[</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(spl)]<sp/>==<sp/><ref refid="namespace_splines_1afebc3f20f002ddfdcbd2d725d1aa55dfa30bb7d325c1c582be9d10f81e2434671" kindref="member">CONSTANT_TYPE</ref><sp/>)<sp/>--nrow;<sp/></highlight><highlight class="comment">//<sp/>constant<sp/>spline<sp/>uses<sp/>n-1<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datai.copyto_vec_real(<sp/>Yp[</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(spl)],<sp/>msg1.c_str()<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(m_npts)<sp/>==<sp/>Y[spl].size(),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>column<sp/>`{}`<sp/>of<sp/>`ypdata`<sp/>expected<sp/>of<sp/>size<sp/>{}<sp/>found<sp/>of<sp/>size<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>im-&gt;first,<sp/>m_npts,<sp/>Y[spl].size()</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>Utils::Malloc&lt;void*&gt;<sp/>mem(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>mem.allocate(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(<sp/>3*m_nspl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>__headers<sp/>=<sp/>mem(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(<sp/>m_nspl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>__Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mem(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(<sp/>m_nspl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>__Yp<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mem(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(<sp/>m_nspl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spl<sp/>=<sp/>0;<sp/>spl<sp/>&lt;<sp/>size_t(m_nspl);<sp/>++spl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__headers[spl]<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers[spl].c_str()</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Y[spl]<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Y[spl].front()</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Yp[spl]<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yp[spl].size()<sp/>&gt;<sp/>0<sp/>?<sp/>&amp;Yp[spl].front()<sp/>:<sp/>nullptr</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_splines_1_1_spline_set_1a7c61521bebcda475e45c8825d7250fb4" kindref="member">build</ref>(</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_nspl,<sp/>m_npts,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__headers)),</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;stype.front(),<sp/>&amp;X.front(),</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__Y)),</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__Yp))</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gc.exists(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>gc_boundary<sp/>=<sp/>gc(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>ne<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(gc_boundary.get_num_elements());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_ASSERT(</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ne<sp/>==<sp/>m_nspl,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{},<sp/>field<sp/>`boundary`<sp/>expected<sp/>a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>generic<sp/>vector<sp/>of<sp/>size:<sp/>{}<sp/>but<sp/>is<sp/>of<sp/>size:<sp/>{}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg,<sp/>ne,<sp/>m_nspl</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>ispl<sp/>=<sp/>0;<sp/>ispl<sp/>&lt;<sp/>ne;<sp/>++ispl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/>*<sp/>S<sp/>=<sp/>m_splines[size_t(ispl)];</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenericContainer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>item<sp/>=<sp/>gc_boundary(ispl,</highlight><highlight class="stringliteral">&quot;SplineSet<sp/>boundary<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>item.exists(</highlight><highlight class="stringliteral">&quot;closed&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>item(</highlight><highlight class="stringliteral">&quot;closed&quot;</highlight><highlight class="normal">).get_bool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S-&gt;<ref refid="class_splines_1_1_spline_1a54493db067c02d0c4c758609c45e0012" kindref="member">make_closed</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S-&gt;<ref refid="class_splines_1_1_spline_1a80ab8ff6188bc9be6a09152c19e88519" kindref="member">make_opened</ref>();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>item.exists(</highlight><highlight class="stringliteral">&quot;extend&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>item(</highlight><highlight class="stringliteral">&quot;extend&quot;</highlight><highlight class="normal">).get_bool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S-&gt;<ref refid="class_splines_1_1_spline_1a4cb02493a9e83dd14f6aa79c2d1c9b80" kindref="member">make_unbounded</ref>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>item(</highlight><highlight class="stringliteral">&quot;extend_constant&quot;</highlight><highlight class="normal">).get_bool()<sp/>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S-&gt;<ref refid="class_splines_1_1_spline_1a136031149f0d37c34485aa4ab61a0fa1" kindref="member">make_extended_constant</ref>();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S-&gt;<ref refid="class_splines_1_1_spline_1a03b4785b5902ab438e4ba1d4d28accfc" kindref="member">make_extended_not_constant</ref>();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S-&gt;<ref refid="class_splines_1_1_spline_1ab4d4f0e173b89874c88240be3fb4464f" kindref="member">make_bounded</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="class_splines_1_1_spline_set_1a56e4a4b716edeffd41f4e181471834e2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1ad4dc94e17e08b48aa9ab6a221775aea7" kindref="member">SplineSet::eval</ref>(<sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(x);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="class_splines_1_1_spline_set_1a1ff13e05cbd94754eee7b090c275508c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1ad4dc94e17e08b48aa9ab6a221775aea7" kindref="member">SplineSet::eval</ref>(<sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(vec[i]);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="class_splines_1_1_spline_set_1a5e62569c460d29458ea905714d1c570b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1ad4dc94e17e08b48aa9ab6a221775aea7" kindref="member">SplineSet::eval</ref>(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(x);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="class_splines_1_1_spline_set_1a3ff8bd850140ad01b08fe4735e8fe96f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1ad4dc94e17e08b48aa9ab6a221775aea7" kindref="member">SplineSet::eval</ref>(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(vec[i]);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="class_splines_1_1_spline_set_1a27011f83885afd8775ea9f1342a4274c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1afe95200df8a45b21901cfb432307e384" kindref="member">SplineSet::eval2</ref>(</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(x);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="class_splines_1_1_spline_set_1a60386ada03bb1d31b7d65d07511afdf5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1afe95200df8a45b21901cfb432307e384" kindref="member">SplineSet::eval2</ref>(</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].get_vec_real();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(x);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="class_splines_1_1_spline_set_1a8cfad48ac045f8db1272a06de67abe6a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1afe95200df8a45b21901cfb432307e384" kindref="member">SplineSet::eval2</ref>(</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(x);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="class_splines_1_1_spline_set_1a51090695b20a5b33b57feae1fe5eb0d2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1afe95200df8a45b21901cfb432307e384" kindref="member">SplineSet::eval2</ref>(</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].get_vec_real();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3bc7688f7a13e618b2222c190e68c9b1" kindref="member">eval</ref>(x);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/><sp/>__<sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/>_</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/>/<sp/>_(_)_<sp/>__<sp/>___|<sp/>|_<sp/><sp/><sp/><sp/>__|<sp/>|<sp/>___<sp/>_<sp/>__(_)_<sp/><sp/><sp/>____<sp/>_|<sp/>|_(_)_<sp/><sp/><sp/>_____</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|<sp/>|_|<sp/>|<sp/>&apos;__/<sp/>__|<sp/>__|<sp/><sp/>/<sp/>_`<sp/>|/<sp/>_<sp/>\<sp/>&apos;__|<sp/>\<sp/>\<sp/>/<sp/>/<sp/>_`<sp/>|<sp/>__|<sp/>\<sp/>\<sp/>/<sp/>/<sp/>_<sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|<sp/><sp/>_|<sp/>|<sp/>|<sp/><sp/>\__<sp/>\<sp/>|_<sp/><sp/>|<sp/>(_|<sp/>|<sp/><sp/>__/<sp/>|<sp/><sp/>|<sp/>|\<sp/>V<sp/>/<sp/>(_|<sp/>|<sp/>|_|<sp/>|\<sp/>V<sp/>/<sp/><sp/>__/</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|_|<sp/>|_|_|<sp/><sp/>|___/\__|<sp/><sp/>\__,_|\___|_|<sp/><sp/>|_|<sp/>\_/<sp/>\__,_|\__|_|<sp/>\_/<sp/>\___|</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="class_splines_1_1_spline_set_1a8606380e41d364759cdfcd52e8184d07" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1adcd4ccf768438db070ee0844ae2b5472" kindref="member">SplineSet::eval_D</ref>(<sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(x);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="class_splines_1_1_spline_set_1ac7df3ef684097578edad2cf77774f495" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1adcd4ccf768438db070ee0844ae2b5472" kindref="member">SplineSet::eval_D</ref>(<sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(vec[i]);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="class_splines_1_1_spline_set_1a8875ee4a0a080b68dab0968c111ba899" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1adcd4ccf768438db070ee0844ae2b5472" kindref="member">SplineSet::eval_D</ref>(</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(x);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="class_splines_1_1_spline_set_1a5b50f300b8fa10f8930e994aa0ca6f47" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1adcd4ccf768438db070ee0844ae2b5472" kindref="member">SplineSet::eval_D</ref>(</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(vec[i]);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="class_splines_1_1_spline_set_1a81ee781e17f437c7ef6c45d62ab681c8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a1a68e3346cd7db538110d094df34ca9e" kindref="member">SplineSet::eval2_D</ref>(</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(x);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="class_splines_1_1_spline_set_1a413d57ffcc4ce2b8a56bac46f05bf899" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a1a68e3346cd7db538110d094df34ca9e" kindref="member">SplineSet::eval2_D</ref>(</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].get_vec_real();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(x);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573" refid="class_splines_1_1_spline_set_1acc2de8e9ec4085f981d5ff1b65facf42" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a1a68e3346cd7db538110d094df34ca9e" kindref="member">SplineSet::eval2_D</ref>(</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(x);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595" refid="class_splines_1_1_spline_set_1a40c5a8953764bf7a6da2a91900cc82a9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a1a68e3346cd7db538110d094df34ca9e" kindref="member">SplineSet::eval2_D</ref>(</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].get_vec_real();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a1e535c0fb806e665f2fa20d77acfa3de" kindref="member">eval_D</ref>(x);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/>_</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/>___<sp/><sp/>___<sp/><sp/>___<sp/>___<sp/><sp/>_<sp/>__<sp/><sp/><sp/>__|<sp/>|<sp/><sp/><sp/>__|<sp/>|<sp/>___<sp/>_<sp/>__(_)_<sp/><sp/><sp/>____<sp/>_|<sp/>|_(_)_<sp/><sp/><sp/>_____</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/>//<sp/><sp/>/<sp/>__|/<sp/>_<sp/>\/<sp/>__/<sp/>_<sp/>\|<sp/>&apos;_<sp/>\<sp/>/<sp/>_`<sp/>|<sp/><sp/>/<sp/>_`<sp/>|/<sp/>_<sp/>\<sp/>&apos;__|<sp/>\<sp/>\<sp/>/<sp/>/<sp/>_`<sp/>|<sp/>__|<sp/>\<sp/>\<sp/>/<sp/>/<sp/>_<sp/>\</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/>//<sp/><sp/>\__<sp/>\<sp/><sp/>__/<sp/>(_|<sp/>(_)<sp/>|<sp/>|<sp/>|<sp/>|<sp/>(_|<sp/>|<sp/>|<sp/>(_|<sp/>|<sp/><sp/>__/<sp/>|<sp/><sp/>|<sp/>|\<sp/>V<sp/>/<sp/>(_|<sp/>|<sp/>|_|<sp/>|\<sp/>V<sp/>/<sp/><sp/>__/</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|___/\___|\___\___/|_|<sp/>|_|\__,_|<sp/><sp/>\__,_|\___|_|<sp/><sp/>|_|<sp/>\_/<sp/>\__,_|\__|_|<sp/>\_/<sp/>\___|</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="class_splines_1_1_spline_set_1af612358fa158b19ab6a9f63b1bc3a3c2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1af47f7b8ac03f3db61c0bb37989dea75c" kindref="member">SplineSet::eval_DD</ref>(<sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(x);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="class_splines_1_1_spline_set_1aafdf9e55dd9a9d51d8dcd4188648763b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1af47f7b8ac03f3db61c0bb37989dea75c" kindref="member">SplineSet::eval_DD</ref>(<sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(vec[i]);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="class_splines_1_1_spline_set_1a91bd8c113ba938fff24f10c7318e745a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1af47f7b8ac03f3db61c0bb37989dea75c" kindref="member">SplineSet::eval_DD</ref>(</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(x);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="class_splines_1_1_spline_set_1a8fcd7cf6d4cf83b671e2291b233e7ebc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1af47f7b8ac03f3db61c0bb37989dea75c" kindref="member">SplineSet::eval_DD</ref>(</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(vec[i]);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="class_splines_1_1_spline_set_1ac3ef65aeed29ac3be1a7c437bcdcfc54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a85e7eab504e95b0a5ea368bcb4087b4e" kindref="member">SplineSet::eval2_DD</ref>(</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(x);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="class_splines_1_1_spline_set_1a49cb269c9f527ddfaabe31ca3230e5f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a85e7eab504e95b0a5ea368bcb4087b4e" kindref="member">SplineSet::eval2_DD</ref>(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].get_vec_real();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(x);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="class_splines_1_1_spline_set_1a1418204d67a71448cef755045c015822" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a85e7eab504e95b0a5ea368bcb4087b4e" kindref="member">SplineSet::eval2_DD</ref>(</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(x);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="class_splines_1_1_spline_set_1a0424923db81bb691ad0e57eeb3be4a43" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a85e7eab504e95b0a5ea368bcb4087b4e" kindref="member">SplineSet::eval2_DD</ref>(</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].get_vec_real();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a3763f7cf8c1090809dc58c5d5a7f9bec" kindref="member">eval_DD</ref>(x);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/>_<sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/>_</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|<sp/>|_|<sp/>|__<sp/>(_)_<sp/>__<sp/>__|<sp/>|<sp/><sp/><sp/>__|<sp/>|<sp/>___<sp/>_<sp/>__(_)_<sp/><sp/><sp/>____<sp/>_|<sp/>|_(_)_<sp/><sp/><sp/>_____</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|<sp/>__|<sp/>&apos;_<sp/>\|<sp/>|<sp/>&apos;__/<sp/>_`<sp/>|<sp/><sp/>/<sp/>_`<sp/>|/<sp/>_<sp/>\<sp/>&apos;__|<sp/>\<sp/>\<sp/>/<sp/>/<sp/>_`<sp/>|<sp/>__|<sp/>\<sp/>\<sp/>/<sp/>/<sp/>_<sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/>//<sp/><sp/>|<sp/>|_|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>(_|<sp/>|<sp/>|<sp/>(_|<sp/>|<sp/><sp/>__/<sp/>|<sp/><sp/>|<sp/>|\<sp/>V<sp/>/<sp/>(_|<sp/>|<sp/>|_|<sp/>|\<sp/>V<sp/>/<sp/><sp/>__/</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/>\__|_|<sp/>|_|_|_|<sp/><sp/>\__,_|<sp/><sp/>\__,_|\___|_|<sp/><sp/>|_|<sp/>\_/<sp/>\__,_|\__|_|<sp/>\_/<sp/>\___|</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802" refid="class_splines_1_1_spline_set_1a63f1cdbda9f2ba095e2fb9c4ee308907" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a2796e38da32fa7f6b9c5cdfc8d0b8aca" kindref="member">SplineSet::eval_DDD</ref>(<sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x,<sp/>GenericContainer<sp/>&amp;<sp/>gc<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(x);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815" refid="class_splines_1_1_spline_set_1a617b515a8299584d4d9f92fe046579b1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a2796e38da32fa7f6b9c5cdfc8d0b8aca" kindref="member">SplineSet::eval_DDD</ref>(</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)];</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(vec[i]);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="class_splines_1_1_spline_set_1aee4c46c75c4921ae52f1d846ad01c601" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a2796e38da32fa7f6b9c5cdfc8d0b8aca" kindref="member">SplineSet::eval_DDD</ref>(</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(x);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="class_splines_1_1_spline_set_1a5d5f132629395af3cb48b7a881986584" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1a2796e38da32fa7f6b9c5cdfc8d0b8aca" kindref="member">SplineSet::eval_DDD</ref>(</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>vec,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(vec.size());</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(vec[i]);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872" refid="class_splines_1_1_spline_set_1a997a652ccbf9eec633133775be48151a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1abff045efd47aa584cea28b6f0e01a773" kindref="member">SplineSet::eval2_DDD</ref>(</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(x);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="class_splines_1_1_spline_set_1a33c4e378faa9216ad0209d92dd8d485d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1abff045efd47aa584cea28b6f0e01a773" kindref="member">SplineSet::eval2_DDD</ref>(</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].set_vec_real(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>m_header_to_position.n_elem();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinarySearch::DATA_TYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref><sp/>=<sp/>m_header_to_position.get_elem(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.first].get_vec_real();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>m_splines[size_t(<ref refid="class_splines_1_1_spline_set_1ac3b19336658dfdfaa0518314cac2c0ae" kindref="member">D</ref>.second)]-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(x);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923" refid="class_splines_1_1_spline_set_1acfb1d968183b1df2d12e39d98c5590bc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1abff045efd47aa584cea28b6f0e01a773" kindref="member">SplineSet::eval2_DDD</ref>(</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeta,</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zeta,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(x);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="class_splines_1_1_spline_set_1ae7420e28f6dd5913b24e428a89d53d52" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_splines_1_1_spline_set_1abff045efd47aa584cea28b6f0e01a773" kindref="member">SplineSet::eval2_DDD</ref>(</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_real_type<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>zetas,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indep,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>vec_string_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>columns,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>GenericContainer<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>gc</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref><sp/>npts<sp/>=<sp/><ref refid="namespace_splines_1a0b83d8865bf650fca7ad1d657245a8a1" kindref="member">integer</ref>(zetas.size());</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>map_type<sp/>&amp;<sp/>vals<sp/>=<sp/>gc.set_map();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vals[*is].set_vec_real(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(npts)<sp/>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(npts);<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_splines_1afabb8610fb01952c2fcf1f17337bd44a" kindref="member">real_type</ref><sp/>x;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intersect(<sp/>indep,<sp/>zetas[i],<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vec_string_type::const_iterator<sp/>is<sp/>=<sp/>columns.begin();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>!=<sp/>columns.end();<sp/>++is<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_real_type<sp/>&amp;<sp/>v<sp/>=<sp/>vals[*is].get_vec_real();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_splines_1_1_spline" kindref="compound">Spline</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_spl<sp/>=<sp/><ref refid="class_splines_1_1_spline_set_1a8da96f04f23e2a3b19ae7e585031cff3" kindref="member">getSpline</ref>(<sp/>is-&gt;c_str()<sp/>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>p_spl-&gt;<ref refid="class_splines_1_1_spline_1a45f52cb16cf6cef77ab882cb7170e804" kindref="member">eval_DDD</ref>(x);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/enrico/Ricerca/develop/C++/pins-mechatronix/LibSources/submodules/Splines/src/SplineSetGC.cc"/>
  </compounddef>
</doxygen>

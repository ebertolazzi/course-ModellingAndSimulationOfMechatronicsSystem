<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_d_a_e3_taylor_solver_8m" kind="file" language="C++">
    <compoundname>DAE3TaylorSolver.m</compoundname>
    <innerclass refid="class_d_a_e3_taylor_solver" prot="public">DAE3TaylorSolver</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%</highlight></codeline>
<codeline lineno="2"><highlight class="normal">%<sp/>Matlab<sp/>code<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>Course:</highlight></codeline>
<codeline lineno="3"><highlight class="normal">%</highlight></codeline>
<codeline lineno="4"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/>Modelling<sp/>and<sp/>Simulation<sp/>of<sp/>Mechatronics<sp/>System</highlight></codeline>
<codeline lineno="5"><highlight class="normal">%</highlight></codeline>
<codeline lineno="6"><highlight class="normal">%<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="normal">%<sp/>Enrico<sp/>Bertolazzi</highlight></codeline>
<codeline lineno="8"><highlight class="normal">%<sp/>Dipartimento<sp/>di<sp/>Ingegneria<sp/>Industriale</highlight></codeline>
<codeline lineno="9"><highlight class="normal">%<sp/>Universita`<sp/>degli<sp/>Studi<sp/>di<sp/>Trento</highlight></codeline>
<codeline lineno="10"><highlight class="normal">%<sp/>email:<sp/>enrico.bertolazzi@unitn.it</highlight></codeline>
<codeline lineno="11"><highlight class="normal">%</highlight></codeline>
<codeline lineno="12" refid="class_d_a_e3_taylor_solver" refkind="compound"><highlight class="normal">classdef<sp/><ref refid="class_d_a_e3_taylor_solver" kindref="compound">DAE3TaylorSolver</ref><sp/>&lt;<sp/>handle</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>properties<sp/>(SetAccess<sp/>=<sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">,<sp/>Hidden<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>solverName;<sp/>%<sp/>should<sp/>contain<sp/>the<sp/>name<sp/>of<sp/>the<sp/>numerical<sp/>method<sp/>used</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>DAEclass;<sp/><sp/><sp/>%<sp/>the<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>storing<sp/>the<sp/>DAE</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="17" refid="class_d_a_e3_taylor_solver_1a59cfed9b16b4b9f515e7989f2d39babc" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>methods</highlight></codeline>
<codeline lineno="19" refid="class_d_a_e3_taylor_solver_1a217fc2ce2f1ac3f58ff6e9cea9903d65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>self<sp/>=<sp/><ref refid="class_d_a_e3_taylor_solver" kindref="compound">DAE3TaylorSolver</ref>()</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.solverName<sp/>=<sp/>&apos;TaylorSolver&apos;;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>delete(<sp/>self<sp/>)</highlight></codeline>
<codeline lineno="24" refid="class_d_a_e3_taylor_solver_1aed337aa9328219e884fd2f45641bd14c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>name<sp/>=<sp/>getName(<sp/>self<sp/>)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>self.solverName;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="29" refid="class_d_a_e3_taylor_solver_1a004f81ddddedd493083f51669ccd4b37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>setDAE(<sp/>self,<sp/>DAEclass<sp/>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.DAEclass<sp/>=<sp/>DAEclass;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="33" refid="class_d_a_e3_taylor_solver_1a74e68eb6cdaa590ab35a644c980b3426" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/><sp/>compute<sp/>approximate<sp/>solution<sp/>on<sp/>a<sp/>series<sp/>of<sp/>point<sp/>given<sp/>by<sp/>the<sp/>vector<sp/>t</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/><sp/>starting<sp/>at<sp/>initial<sp/>point<sp/>[p0,v0]</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="38" refid="class_d_a_e3_taylor_solver_1a4c180616d95dff2303450bcacdd16d71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>[pos,vel,lambda]<sp/>=<sp/>advance_simple(<sp/>self,<sp/>t,<sp/>p0,<sp/>v0<sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[n,m]<sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.getDim();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>zeros(n,length(t));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>zeros(n,length(t));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lambda<sp/><sp/><sp/>=<sp/>zeros(m,length(t));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos(:,1)<sp/>=<sp/>p0(:);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vel(:,1)<sp/>=<sp/>v0(:);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>k=1:length(t)-1</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t(:,k);</highlight></codeline>
<codeline lineno="47" refid="class_d_a_e3_taylor_solver_1aceb3300adac244f41fc257ec59fb3bea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>pos(:,k);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vv<sp/>=<sp/>vel(:,k);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>get<sp/>M,<sp/>Phi,<sp/>Phi_q,<sp/>f<sp/>and<sp/>b</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/><sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.M(<sp/>tt,<sp/>pp<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Phi_q<sp/>=<sp/>self.DAEclass.Phi_q(<sp/>tt,<sp/>pp<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/><sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.gforce(<sp/>tt,<sp/>pp,<sp/>vv<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/><sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.b(<sp/>tt,<sp/>pp,<sp/>vv<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>solve<sp/>for<sp/>v&apos;<sp/>and<sp/>lambda</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/><sp/><sp/><sp/>=<sp/>[<sp/>M,<sp/><sp/><sp/><sp/><sp/>Phi_q.&apos;;<sp/>...</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Phi_q,<sp/>zeros(m,m)<sp/>]\[f;b];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vp<sp/><sp/><sp/><sp/>=<sp/>vl(1:n);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>update<sp/>using<sp/>Taylor</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT<sp/>=<sp/>t(k+1)-t(k);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos(:,k+1)<sp/><sp/><sp/><sp/>=<sp/>pp<sp/>+<sp/>DT*vv<sp/>+<sp/>(DT^2/2)*vp;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel(:,k+1)<sp/><sp/><sp/><sp/>=<sp/>vv<sp/>+<sp/>DT*vp;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda(:,k+1)<sp/>=<sp/>vl(n+1:n+m);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/><sp/>compute<sp/>approximate<sp/>solution<sp/>on<sp/>a<sp/>series<sp/>of<sp/>point<sp/>given<sp/>by<sp/>the<sp/>vector<sp/>t</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/><sp/>starting<sp/>at<sp/>initial<sp/>point<sp/>[p0,v0]<sp/>with<sp/>Baumgarte<sp/>stabilization</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>[pos,vel,lambda]<sp/>=<sp/>advance_Baumgarte(<sp/>self,<sp/>t,<sp/>p0,<sp/>v0,<sp/>eta,<sp/>omega<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[n,m]<sp/>=<sp/>self.DAEclass.getDim();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>zeros(n,length(t));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>zeros(n,length(t));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lambda<sp/><sp/><sp/>=<sp/>zeros(m,length(t));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos(:,1)<sp/>=<sp/>p0(:);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vel(:,1)<sp/>=<sp/>v0(:);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-2*eta*omega;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-omega^2;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>k=1:length(t)-1</highlight></codeline>
<codeline lineno="80" refid="class_d_a_e3_taylor_solver_1a56dbeaaf2c42761df6622e1e28a79942" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tt<sp/>=<sp/>t(:,k);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>pos(:,k);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vv<sp/>=<sp/>vel(:,k);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>get<sp/>M,<sp/>Phi,<sp/>Phi_q,<sp/>f<sp/>and<sp/>b</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/><sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.M(<sp/>tt,<sp/>pp<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Phi<sp/><sp/><sp/>=<sp/>self.DAEclass.Phi(<sp/>tt,<sp/>pp<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Phi_t<sp/>=<sp/>self.DAEclass.Phi_t(<sp/>tt,<sp/>pp<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Phi_q<sp/>=<sp/>self.DAEclass.Phi_q(<sp/>tt,<sp/>pp<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/><sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.gforce(<sp/>tt,<sp/>pp,<sp/>vv<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/><sp/><sp/><sp/><sp/>=<sp/>self.DAEclass.b(<sp/>tt,<sp/>pp,<sp/>vv<sp/>)<sp/>+<sp/>t1<sp/>*<sp/>(<sp/>Phi_t<sp/>+<sp/>Phi_q<sp/>*<sp/>vv<sp/>)<sp/>+<sp/>t2<sp/>*<sp/>Phi;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>solve<sp/>for<sp/>v&apos;<sp/>and<sp/>lambda</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/><sp/><sp/><sp/>=<sp/>[<sp/>M,<sp/><sp/><sp/><sp/><sp/>Phi_q.&apos;;<sp/>...</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Phi_q,<sp/>zeros(m,m)<sp/>]\[f;b];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vp<sp/><sp/><sp/><sp/>=<sp/>vl(1:n);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>update<sp/>using<sp/>Taylor</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT<sp/>=<sp/>t(k+1)-t(k);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos(:,k+1)<sp/><sp/><sp/><sp/>=<sp/>pp<sp/>+<sp/>DT*vv<sp/>+<sp/>(DT^2/2)*vp;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel(:,k+1)<sp/><sp/><sp/><sp/>=<sp/>vv<sp/>+<sp/>DT*vp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda(:,k+1)<sp/>=<sp/>vl(n+1:n+m);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="102"><highlight class="normal">end</highlight></codeline>
    </programlisting>
    <location file="/Users/enrico/Ricerca/papers/_didattica/Didattica/github-2020-courseModellingAndSimulationOfMechatronicsSystem/toolbox/lib/DAE/DAE3TaylorSolver.m"/>
  </compounddef>
</doxygen>

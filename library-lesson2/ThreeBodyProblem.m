% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: ThreeBodyProblem
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef ThreeBodyProblem < Indigo_ImplicitSystem
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_G = 1;
    m_m_1 = 1;
    m_m_2 = 2;
    m_m_3 = 3;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = ThreeBodyProblem( varargin )
      % Constructor for 'ThreeBodyProblem' class.

      % Superclass constructor
      num_eqns = 12;
      num_invs = 0;
      this = this@Indigo_ImplicitSystem('ThreeBodyProblem', num_eqns, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 4)
        this.m_G = varargin{1};
        this.m_m_1 = varargin{2};
        this.m_m_2 = varargin{3};
        this.m_m_3 = varargin{4};
      else
        error('wrong number of input arguments.');
      end
    end % ThreeBodyProblem
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, t )
      % Calculate the residual of the implicit system F(x, x_dot).

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);
      x_1_dot = in_2(1);
      x_2_dot = in_2(2);
      x_3_dot = in_2(3);
      y_1_dot = in_2(4);
      y_2_dot = in_2(5);
      y_3_dot = in_2(6);
      u_1_dot = in_2(7);
      u_2_dot = in_2(8);
      u_3_dot = in_2(9);
      v_1_dot = in_2(10);
      v_2_dot = in_2(11);
      v_3_dot = in_2(12);

      % Evaluate assignments
      % No assignments

      % Evaluate vector elements
      out_1 = x_1_dot - u_1;
      out_2 = x_2_dot - u_2;
      out_3 = x_3_dot - u_3;
      out_4 = y_1_dot - v_1;
      out_5 = y_2_dot - v_2;
      out_6 = y_3_dot - v_3;
      t1 = x_1 ^ 2;
      t4 = x_2 ^ 2;
      t5 = y_1 ^ 2;
      t8 = y_2 ^ 2;
      t9 = -2 * x_1 * x_2 - 2 * y_1 * y_2 + t1 + t4 + t5 + t8;
      t10 = sqrt(t9);
      t11 = t10 * t9;
      t12 = t11 * m_3;
      t13 = x_3 * t12;
      t17 = x_3 ^ 2;
      t20 = y_3 ^ 2;
      t21 = -2 * x_1 * x_3 - 2 * y_1 * y_3 + t1 + t17 + t20 + t5;
      t22 = sqrt(t21);
      t23 = t22 * t21;
      t24 = t23 * m_2;
      t26 = x_2 * t24;
      t29 = 0.1e1 / t11;
      t30 = 0.1e1 / t23;
      t31 = t30 * t29;
      out_7 = u_1_dot - t31 * (-x_1 * t12 - x_1 * t24 + t13 + t26) * G;
      t37 = -2 * x_2 * x_3 - 2 * y_2 * y_3 + t17 + t20 + t4 + t8;
      t38 = sqrt(t37);
      t39 = t38 * t37;
      t40 = t39 * m_1;
      t41 = x_1 * t40;
      t46 = 0.1e1 / t39;
      t47 = t29 * t46;
      out_8 = u_2_dot - t47 * (-x_2 * t12 - x_2 * t40 + t13 + t41) * G;
      t53 = t46 * t30;
      out_9 = u_3_dot + t53 * (x_3 * t24 + x_3 * t40 - t26 - t41) * G;
      t55 = y_3 * t12;
      t58 = y_2 * t24;
      out_10 = v_1_dot - t31 * (-y_1 * t12 - y_1 * t24 + t55 + t58) * G;
      t62 = y_1 * t40;
      out_11 = v_2_dot - t47 * (-y_2 * t12 - y_2 * t40 + t55 + t62) * G;
      out_12 = v_3_dot + t53 * (y_3 * t24 + y_3 * t40 - t58 - t62) * G;

      % Store outputs
      out_F = zeros(12, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, t )
      % Calculate the Jacobian of F with respect to x.

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);
      x_1_dot = in_2(1);
      x_2_dot = in_2(2);
      x_3_dot = in_2(3);
      y_1_dot = in_2(4);
      y_2_dot = in_2(5);
      y_3_dot = in_2(6);
      u_1_dot = in_2(7);
      u_2_dot = in_2(8);
      u_3_dot = in_2(9);
      v_1_dot = in_2(10);
      v_2_dot = in_2(11);
      v_3_dot = in_2(12);

      % Evaluate assignments
      % No assignments

      % Evaluate vector elements
      t1 = x_1 ^ 2;
      t4 = x_2 ^ 2;
      t5 = y_1 ^ 2;
      t8 = y_2 ^ 2;
      t9 = -2 * x_1 * x_2 - 2 * y_1 * y_2 + t1 + t4 + t5 + t8;
      t10 = sqrt(t9);
      t11 = t10 * m_3;
      t13 = 2 * x_1 - 2 * x_2;
      t16 = 0.3e1 / 0.2e1 * t13 * x_3 * t11;
      t20 = t10 * t9;
      t21 = t20 * m_3;
      t24 = x_3 ^ 2;
      t27 = y_3 ^ 2;
      t28 = -2 * x_1 * x_3 - 2 * y_1 * y_3 + t1 + t24 + t27 + t5;
      t29 = sqrt(t28);
      t30 = t29 * m_2;
      t32 = -2 * x_3 + 2 * x_1;
      t36 = t29 * t28;
      t37 = t36 * m_2;
      t40 = 0.3e1 / 0.2e1 * t32 * x_2 * t30;
      t43 = 0.1e1 / t20;
      t44 = 0.1e1 / t36;
      t45 = t44 * t43;
      t47 = x_3 * t21;
      t50 = x_2 * t37;
      t52 = (-x_1 * t21 - x_1 * t37 + t47 + t50) * G;
      t53 = t9 ^ 2;
      t55 = 0.1e1 / t10 / t53;
      t56 = t44 * t55;
      t57 = t13 * t56;
      t60 = t28 ^ 2;
      t62 = 0.1e1 / t29 / t60;
      t63 = t62 * t43;
      t64 = t32 * t63;
      out_7_1 = -t45 * (t16 - 0.3e1 / 0.2e1 * t13 * x_1 * t11 - t21 - 0.3e1 / 0.2e1 * t32 * x_1 * t30 - t37 + t40) * G + 0.3e1 / 0.2e1 * t57 * t52 + 0.3e1 / 0.2e1 * t64 * t52;
      t71 = -2 * x_2 * x_3 - 2 * y_2 * y_3 + t24 + t27 + t4 + t8;
      t72 = sqrt(t71);
      t73 = t72 * t71;
      t74 = t73 * m_1;
      t80 = 0.1e1 / t73;
      t81 = t43 * t80;
      t83 = x_1 * t74;
      t87 = (-x_2 * t21 - x_2 * t74 + t47 + t83) * G;
      t88 = t55 * t80;
      t89 = t13 * t88;
      out_8_1 = -t81 * (t74 + t16 - 0.3e1 / 0.2e1 * t13 * x_2 * t11) * G + 0.3e1 / 0.2e1 * t89 * t87;
      t97 = t80 * t44;
      t102 = (x_3 * t37 + x_3 * t74 - t50 - t83) * G;
      t103 = t80 * t62;
      t104 = t32 * t103;
      out_9_1 = t97 * (-t74 + 0.3e1 / 0.2e1 * t32 * x_3 * t30 - t40) * G - 0.3e1 / 0.2e1 * t104 * t102;
      t108 = t13 * y_3 * t11;
      t114 = t32 * y_2 * t30;
      t119 = y_3 * t21;
      t122 = y_2 * t37;
      t124 = (-y_1 * t21 - y_1 * t37 + t119 + t122) * G;
      out_10_1 = -t45 * (-0.3e1 / 0.2e1 * t13 * y_1 * t11 - 0.3e1 / 0.2e1 * t32 * y_1 * t30 + 0.3e1 / 0.2e1 * t108 + 0.3e1 / 0.2e1 * t114) * G + 0.3e1 / 0.2e1 * t57 * t124 + 0.3e1 / 0.2e1 * t64 * t124;
      t135 = y_1 * t74;
      t139 = (-y_2 * t21 - y_2 * t74 + t119 + t135) * G;
      out_11_1 = -t81 * (-0.3e1 / 0.2e1 * t13 * y_2 * t11 + 0.3e1 / 0.2e1 * t108) * G + 0.3e1 / 0.2e1 * t89 * t139;
      t151 = (y_3 * t37 + y_3 * t74 - t122 - t135) * G;
      out_12_1 = t97 * (0.3e1 / 0.2e1 * t32 * y_3 * t30 - 0.3e1 / 0.2e1 * t114) * G - 0.3e1 / 0.2e1 * t104 * t151;
      t154 = -t13;
      t157 = 0.3e1 / 0.2e1 * t154 * x_3 * t11;
      t164 = t154 * t56;
      out_7_2 = -t45 * (t157 - 0.3e1 / 0.2e1 * t154 * x_1 * t11 + t37) * G + 0.3e1 / 0.2e1 * t164 * t52;
      t167 = t72 * m_1;
      t169 = -2 * x_3 + 2 * x_2;
      t172 = 0.3e1 / 0.2e1 * t169 * x_1 * t167;
      t182 = t71 ^ 2;
      t184 = 0.1e1 / t72 / t182;
      t185 = t43 * t184;
      t186 = t169 * t185;
      t189 = t154 * t88;
      out_8_2 = -t81 * (t172 - 0.3e1 / 0.2e1 * t169 * x_2 * t167 - t74 + t157 - 0.3e1 / 0.2e1 * t154 * x_2 * t11 - t21) * G + 0.3e1 / 0.2e1 * t186 * t87 + 0.3e1 / 0.2e1 * t189 * t87;
      t198 = t184 * t44;
      t199 = t169 * t198;
      out_9_2 = t97 * (0.3e1 / 0.2e1 * t169 * x_3 * t167 - t172 - t37) * G - 0.3e1 / 0.2e1 * t199 * t102;
      t203 = t154 * y_3 * t11;
      out_10_2 = -t45 * (-0.3e1 / 0.2e1 * t154 * y_1 * t11 + 0.3e1 / 0.2e1 * t203) * G + 0.3e1 / 0.2e1 * t164 * t124;
      t213 = t169 * y_1 * t167;
      out_11_2 = -t81 * (-0.3e1 / 0.2e1 * t154 * y_2 * t11 - 0.3e1 / 0.2e1 * t169 * y_2 * t167 + 0.3e1 / 0.2e1 * t203 + 0.3e1 / 0.2e1 * t213) * G + 0.3e1 / 0.2e1 * t186 * t139 + 0.3e1 / 0.2e1 * t189 * t139;
      out_12_2 = t97 * (0.3e1 / 0.2e1 * t169 * y_3 * t167 - 0.3e1 / 0.2e1 * t213) * G - 0.3e1 / 0.2e1 * t199 * t151;
      t234 = -t32;
      t240 = 0.3e1 / 0.2e1 * t234 * x_2 * t30;
      t244 = t234 * t63;
      out_7_3 = -t45 * (t21 - 0.3e1 / 0.2e1 * t234 * x_1 * t30 + t240) * G + 0.3e1 / 0.2e1 * t244 * t52;
      t247 = -t169;
      t250 = 0.3e1 / 0.2e1 * t247 * x_1 * t167;
      t257 = t247 * t185;
      out_8_3 = -t81 * (t250 - 0.3e1 / 0.2e1 * t247 * x_2 * t167 + t21) * G + 0.3e1 / 0.2e1 * t257 * t87;
      t269 = t234 * t103;
      t272 = t247 * t198;
      out_9_3 = t97 * (0.3e1 / 0.2e1 * t247 * x_3 * t167 + t74 - t250 + 0.3e1 / 0.2e1 * t234 * x_3 * t30 + t37 - t240) * G - 0.3e1 / 0.2e1 * t269 * t102 - 0.3e1 / 0.2e1 * t272 * t102;
      t278 = t234 * y_2 * t30;
      out_10_3 = -t45 * (-0.3e1 / 0.2e1 * t234 * y_1 * t30 + 0.3e1 / 0.2e1 * t278) * G + 0.3e1 / 0.2e1 * t244 * t124;
      t286 = t247 * y_1 * t167;
      out_11_3 = -t81 * (-0.3e1 / 0.2e1 * t247 * y_2 * t167 + 0.3e1 / 0.2e1 * t286) * G + 0.3e1 / 0.2e1 * t257 * t139;
      out_12_3 = t97 * (0.3e1 / 0.2e1 * t247 * y_3 * t167 + 0.3e1 / 0.2e1 * t234 * y_3 * t30 - 0.3e1 / 0.2e1 * t278 - 0.3e1 / 0.2e1 * t286) * G - 0.3e1 / 0.2e1 * t269 * t151 - 0.3e1 / 0.2e1 * t272 * t151;
      t308 = 2 * y_1 - 2 * y_2;
      t310 = t308 * x_3 * t11;
      t314 = -2 * y_3 + 2 * y_1;
      t318 = t314 * x_2 * t30;
      t323 = t308 * t56;
      t326 = t314 * t63;
      out_7_4 = -t45 * (-0.3e1 / 0.2e1 * t308 * x_1 * t11 - 0.3e1 / 0.2e1 * t314 * x_1 * t30 + 0.3e1 / 0.2e1 * t310 + 0.3e1 / 0.2e1 * t318) * G + 0.3e1 / 0.2e1 * t323 * t52 + 0.3e1 / 0.2e1 * t326 * t52;
      t335 = t308 * t88;
      out_8_4 = -t81 * (-0.3e1 / 0.2e1 * t308 * x_2 * t11 + 0.3e1 / 0.2e1 * t310) * G + 0.3e1 / 0.2e1 * t335 * t87;
      t344 = t314 * t103;
      out_9_4 = t97 * (0.3e1 / 0.2e1 * t314 * x_3 * t30 - 0.3e1 / 0.2e1 * t318) * G - 0.3e1 / 0.2e1 * t344 * t102;
      t349 = 0.3e1 / 0.2e1 * t308 * y_3 * t11;
      t358 = 0.3e1 / 0.2e1 * t314 * y_2 * t30;
      out_10_4 = -t45 * (t349 - 0.3e1 / 0.2e1 * t308 * y_1 * t11 - t21 - 0.3e1 / 0.2e1 * t314 * y_1 * t30 - t37 + t358) * G + 0.3e1 / 0.2e1 * t323 * t124 + 0.3e1 / 0.2e1 * t326 * t124;
      out_11_4 = -t81 * (t74 + t349 - 0.3e1 / 0.2e1 * t308 * y_2 * t11) * G + 0.3e1 / 0.2e1 * t335 * t139;
      out_12_4 = t97 * (-t74 + 0.3e1 / 0.2e1 * t314 * y_3 * t30 - t358) * G - 0.3e1 / 0.2e1 * t344 * t151;
      t382 = -t308;
      t384 = t382 * x_3 * t11;
      t391 = t382 * t56;
      out_7_5 = -t45 * (-0.3e1 / 0.2e1 * t382 * x_1 * t11 + 0.3e1 / 0.2e1 * t384) * G + 0.3e1 / 0.2e1 * t391 * t52;
      t395 = -2 * y_3 + 2 * y_2;
      t397 = t395 * x_1 * t167;
      t406 = t395 * t185;
      t409 = t382 * t88;
      out_8_5 = -t81 * (-0.3e1 / 0.2e1 * t382 * x_2 * t11 - 0.3e1 / 0.2e1 * t395 * x_2 * t167 + 0.3e1 / 0.2e1 * t384 + 0.3e1 / 0.2e1 * t397) * G + 0.3e1 / 0.2e1 * t406 * t87 + 0.3e1 / 0.2e1 * t409 * t87;
      t418 = t395 * t198;
      out_9_5 = t97 * (0.3e1 / 0.2e1 * t395 * x_3 * t167 - 0.3e1 / 0.2e1 * t397) * G - 0.3e1 / 0.2e1 * t418 * t102;
      t423 = 0.3e1 / 0.2e1 * t382 * y_3 * t11;
      out_10_5 = -t45 * (t423 - 0.3e1 / 0.2e1 * t382 * y_1 * t11 + t37) * G + 0.3e1 / 0.2e1 * t391 * t124;
      t434 = 0.3e1 / 0.2e1 * t395 * y_1 * t167;
      out_11_5 = -t81 * (t434 - 0.3e1 / 0.2e1 * t395 * y_2 * t167 - t74 + t423 - 0.3e1 / 0.2e1 * t382 * y_2 * t11 - t21) * G + 0.3e1 / 0.2e1 * t406 * t139 + 0.3e1 / 0.2e1 * t409 * t139;
      out_12_5 = t97 * (0.3e1 / 0.2e1 * t395 * y_3 * t167 - t434 - t37) * G - 0.3e1 / 0.2e1 * t418 * t151;
      t456 = -t314;
      t460 = t456 * x_2 * t30;
      t465 = t456 * t63;
      out_7_6 = -t45 * (-0.3e1 / 0.2e1 * t456 * x_1 * t30 + 0.3e1 / 0.2e1 * t460) * G + 0.3e1 / 0.2e1 * t465 * t52;
      t468 = -t395;
      t470 = t468 * x_1 * t167;
      t477 = t468 * t185;
      out_8_6 = -t81 * (-0.3e1 / 0.2e1 * t468 * x_2 * t167 + 0.3e1 / 0.2e1 * t470) * G + 0.3e1 / 0.2e1 * t477 * t87;
      t488 = t456 * t103;
      t491 = t468 * t198;
      out_9_6 = t97 * (0.3e1 / 0.2e1 * t468 * x_3 * t167 + 0.3e1 / 0.2e1 * t456 * x_3 * t30 - 0.3e1 / 0.2e1 * t460 - 0.3e1 / 0.2e1 * t470) * G - 0.3e1 / 0.2e1 * t488 * t102 - 0.3e1 / 0.2e1 * t491 * t102;
      t499 = 0.3e1 / 0.2e1 * t456 * y_2 * t30;
      out_10_6 = -t45 * (t21 - 0.3e1 / 0.2e1 * t456 * y_1 * t30 + t499) * G + 0.3e1 / 0.2e1 * t465 * t124;
      t507 = 0.3e1 / 0.2e1 * t468 * y_1 * t167;
      out_11_6 = -t81 * (t507 - 0.3e1 / 0.2e1 * t468 * y_2 * t167 + t21) * G + 0.3e1 / 0.2e1 * t477 * t139;
      out_12_6 = t97 * (0.3e1 / 0.2e1 * t468 * y_3 * t167 + t74 - t507 + 0.3e1 / 0.2e1 * t456 * y_3 * t30 + t37 - t499) * G - 0.3e1 / 0.2e1 * t488 * t151 - 0.3e1 / 0.2e1 * t491 * t151;
      out_1_7 = -1;
      out_2_8 = -1;
      out_3_9 = -1;
      out_4_10 = -1;
      out_5_11 = -1;
      out_6_12 = -1;

      % Store outputs
      out_JF_x = zeros(12, 12);
      out_JF_x(7, 1) = out_7_1;
      out_JF_x(8, 1) = out_8_1;
      out_JF_x(9, 1) = out_9_1;
      out_JF_x(10, 1) = out_10_1;
      out_JF_x(11, 1) = out_11_1;
      out_JF_x(12, 1) = out_12_1;
      out_JF_x(7, 2) = out_7_2;
      out_JF_x(8, 2) = out_8_2;
      out_JF_x(9, 2) = out_9_2;
      out_JF_x(10, 2) = out_10_2;
      out_JF_x(11, 2) = out_11_2;
      out_JF_x(12, 2) = out_12_2;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(9, 3) = out_9_3;
      out_JF_x(10, 3) = out_10_3;
      out_JF_x(11, 3) = out_11_3;
      out_JF_x(12, 3) = out_12_3;
      out_JF_x(7, 4) = out_7_4;
      out_JF_x(8, 4) = out_8_4;
      out_JF_x(9, 4) = out_9_4;
      out_JF_x(10, 4) = out_10_4;
      out_JF_x(11, 4) = out_11_4;
      out_JF_x(12, 4) = out_12_4;
      out_JF_x(7, 5) = out_7_5;
      out_JF_x(8, 5) = out_8_5;
      out_JF_x(9, 5) = out_9_5;
      out_JF_x(10, 5) = out_10_5;
      out_JF_x(11, 5) = out_11_5;
      out_JF_x(12, 5) = out_12_5;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(10, 6) = out_10_6;
      out_JF_x(11, 6) = out_11_6;
      out_JF_x(12, 6) = out_12_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(3, 9) = out_3_9;
      out_JF_x(4, 10) = out_4_10;
      out_JF_x(5, 11) = out_5_11;
      out_JF_x(6, 12) = out_6_12;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, t )
      % Calculate the Jacobian of F with respect to x_dot.

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);
      x_1_dot = in_2(1);
      x_2_dot = in_2(2);
      x_3_dot = in_2(3);
      y_1_dot = in_2(4);
      y_2_dot = in_2(5);
      y_3_dot = in_2(6);
      u_1_dot = in_2(7);
      u_2_dot = in_2(8);
      u_3_dot = in_2(9);
      v_1_dot = in_2(10);
      v_2_dot = in_2(11);
      v_3_dot = in_2(12);

      % Evaluate assignments
      % No assignments

      % Evaluate vector elements
      out_1_1 = 1;
      out_2_2 = 1;
      out_3_3 = 1;
      out_4_4 = 1;
      out_5_5 = 1;
      out_6_6 = 1;
      out_7_7 = 1;
      out_8_8 = 1;
      out_9_9 = 1;
      out_10_10 = 1;
      out_11_11 = 1;
      out_12_12 = 1;

      % Store outputs
      out_JF_x_dot = zeros(12, 12);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(5, 5) = out_5_5;
      out_JF_x_dot(6, 6) = out_6_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(8, 8) = out_8_8;
      out_JF_x_dot(9, 9) = out_9_9;
      out_JF_x_dot(10, 10) = out_10_10;
      out_JF_x_dot(11, 11) = out_11_11;
      out_JF_x_dot(12, 12) = out_12_12;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);

      % Evaluate assignments
      % No assignments

      % Evaluate vector elements
      % No elements

      % Store outputs
      out_h = zeros(0, 1);
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);

      % Evaluate assignments
      % No assignments

      % Evaluate vector elements
      % No elements

      % Store outputs
      out_Jh_x = zeros(0, 12);
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % ThreeBodyProblem

% That's All Folks!

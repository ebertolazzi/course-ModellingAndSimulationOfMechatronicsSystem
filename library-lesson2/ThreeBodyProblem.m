% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: ThreeBodyProblem
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef ThreeBodyProblem < ExplicitSystem
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_G = 1;
    m_m_1 = 1;
    m_m_2 = 2;
    m_m_3 = 3;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = ThreeBodyProblem( varargin )
      % Constructor for 'ThreeBodyProblem' class.

      % Superclass constructor
      num_equations  = 12;
      num_invariants = 0;
      this = this@ExplicitSystem('ThreeBodyProblem', num_equations, num_invariants);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 4)
        this.m_G = varargin{1};
        this.m_m_1 = varargin{2};
        this.m_m_2 = varargin{3};
        this.m_m_3 = varargin{4};
      else
        error('wrong number of input arguments.');
      end
    end
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, t )
      % Calculate the vector f of the semiexplicit system.
      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);

      % Evaluate assignments
      % No assignments

      % Evaluate elements
      out_1 = u_1;
      out_2 = u_2;
      out_3 = u_3;
      out_4 = v_1;
      out_5 = v_2;
      out_6 = v_3;
      t1 = x_1 ^ 2;
      t4 = x_2 ^ 2;
      t5 = y_1 ^ 2;
      t8 = y_2 ^ 2;
      t9 = -2 * x_1 * x_2 - 2 * y_1 * y_2 + t1 + t4 + t5 + t8;
      t10 = sqrt(t9);
      t11 = t10 * t9;
      t12 = t11 * m_3;
      t13 = x_3 * t12;
      t17 = x_3 ^ 2;
      t20 = y_3 ^ 2;
      t21 = -2 * x_1 * x_3 - 2 * y_1 * y_3 + t1 + t17 + t20 + t5;
      t22 = sqrt(t21);
      t23 = t22 * t21;
      t24 = t23 * m_2;
      t26 = x_2 * t24;
      t29 = 0.1e1 / t11;
      t30 = 0.1e1 / t23;
      t31 = t30 * t29;
      out_7 = t31 * (-x_1 * t12 - x_1 * t24 + t13 + t26) * G;
      t36 = -2 * x_2 * x_3 - 2 * y_2 * y_3 + t17 + t20 + t4 + t8;
      t37 = sqrt(t36);
      t38 = t37 * t36;
      t39 = t38 * m_1;
      t40 = x_1 * t39;
      t45 = 0.1e1 / t38;
      t46 = t29 * t45;
      out_8 = t46 * (-x_2 * t12 - x_2 * t39 + t13 + t40) * G;
      t51 = t45 * t30;
      out_9 = -t51 * (x_3 * t24 + x_3 * t39 - t26 - t40) * G;
      t53 = y_3 * t12;
      t56 = y_2 * t24;
      out_10 = t31 * (-y_1 * t12 - y_1 * t24 + t53 + t56) * G;
      t59 = y_1 * t39;
      out_11 = t46 * (-y_2 * t12 - y_2 * t39 + t53 + t59) * G;
      out_12 = -t51 * (y_3 * t24 + y_3 * t39 - t56 - t59) * G;

      % Store outputs
      out_f = zeros(12,1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
      out_f(8) = out_8;
      out_f(9) = out_9;
      out_f(10) = out_10;
      out_f(11) = out_11;
      out_f(12) = out_12;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf = Jf( this, in_1, t )
      % Calculate the Jacobian of f with respect to x.

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);

      % Evaluate assignments
      % None

      % Evaluate function
      out_1_7 = 1;
      out_2_8 = 1;
      out_3_9 = 1;
      out_4_10 = 1;
      out_5_11 = 1;
      out_6_12 = 1;
      t1 = x_1 ^ 2;
      t4 = x_2 ^ 2;
      t5 = y_1 ^ 2;
      t8 = y_2 ^ 2;
      t9 = -2 * x_1 * x_2 - 2 * y_1 * y_2 + t1 + t4 + t5 + t8;
      t10 = sqrt(t9);
      t11 = t10 * m_3;
      t13 = 2 * x_1 - 2 * x_2;
      t16 = 0.3e1 / 0.2e1 * t13 * x_3 * t11;
      t20 = t10 * t9;
      t21 = t20 * m_3;
      t24 = x_3 ^ 2;
      t27 = y_3 ^ 2;
      t28 = -2 * x_1 * x_3 - 2 * y_1 * y_3 + t1 + t24 + t27 + t5;
      t29 = sqrt(t28);
      t30 = t29 * m_2;
      t32 = -2 * x_3 + 2 * x_1;
      t36 = t29 * t28;
      t37 = t36 * m_2;
      t40 = 0.3e1 / 0.2e1 * t32 * x_2 * t30;
      t43 = 0.1e1 / t20;
      t44 = 0.1e1 / t36;
      t45 = t44 * t43;
      t47 = x_3 * t21;
      t50 = x_2 * t37;
      t52 = (-x_1 * t21 - x_1 * t37 + t47 + t50) * G;
      t53 = t9 ^ 2;
      t55 = 0.1e1 / t10 / t53;
      t56 = t44 * t55;
      t57 = t13 * t56;
      t60 = t28 ^ 2;
      t62 = 0.1e1 / t29 / t60;
      t63 = t62 * t43;
      t64 = t32 * t63;
      out_7_1 = t45 * (t16 - 0.3e1 / 0.2e1 * t13 * x_1 * t11 - t21 - 0.3e1 / 0.2e1 * t32 * x_1 * t30 - t37 + t40) * G - 0.3e1 / 0.2e1 * t57 * t52 - 0.3e1 / 0.2e1 * t64 * t52;
      t67 = -t13;
      t70 = 0.3e1 / 0.2e1 * t67 * x_3 * t11;
      t77 = t67 * t56;
      out_7_2 = t45 * (t70 - 0.3e1 / 0.2e1 * t67 * x_1 * t11 + t37) * G - 0.3e1 / 0.2e1 * t77 * t52;
      t80 = -t32;
      t86 = 0.3e1 / 0.2e1 * t80 * x_2 * t30;
      t90 = t80 * t63;
      out_7_3 = t45 * (t21 - 0.3e1 / 0.2e1 * t80 * x_1 * t30 + t86) * G - 0.3e1 / 0.2e1 * t90 * t52;
      t94 = 2 * y_1 - 2 * y_2;
      t96 = t94 * x_3 * t11;
      t100 = -2 * y_3 + 2 * y_1;
      t104 = t100 * x_2 * t30;
      t109 = t94 * t56;
      t112 = t100 * t63;
      out_7_4 = t45 * (-0.3e1 / 0.2e1 * t100 * x_1 * t30 - 0.3e1 / 0.2e1 * t94 * x_1 * t11 + 0.3e1 / 0.2e1 * t104 + 0.3e1 / 0.2e1 * t96) * G - 0.3e1 / 0.2e1 * t109 * t52 - 0.3e1 / 0.2e1 * t112 * t52;
      t115 = -t94;
      t117 = t115 * x_3 * t11;
      t124 = t115 * t56;
      out_7_5 = t45 * (-0.3e1 / 0.2e1 * t115 * x_1 * t11 + 0.3e1 / 0.2e1 * t117) * G - 0.3e1 / 0.2e1 * t124 * t52;
      t127 = -t100;
      t131 = t127 * x_2 * t30;
      t136 = t127 * t63;
      out_7_6 = t45 * (-0.3e1 / 0.2e1 * t127 * x_1 * t30 + 0.3e1 / 0.2e1 * t131) * G - 0.3e1 / 0.2e1 * t136 * t52;
      t143 = -2 * x_2 * x_3 - 2 * y_2 * y_3 + t24 + t27 + t4 + t8;
      t144 = sqrt(t143);
      t145 = t144 * t143;
      t146 = t145 * m_1;
      t152 = 0.1e1 / t145;
      t153 = t43 * t152;
      t155 = x_1 * t146;
      t159 = (-x_2 * t146 - x_2 * t21 + t155 + t47) * G;
      t160 = t55 * t152;
      t161 = t13 * t160;
      out_8_1 = t153 * (t146 + t16 - 0.3e1 / 0.2e1 * t13 * x_2 * t11) * G - 0.3e1 / 0.2e1 * t161 * t159;
      t164 = t144 * m_1;
      t166 = -2 * x_3 + 2 * x_2;
      t169 = 0.3e1 / 0.2e1 * t166 * x_1 * t164;
      t179 = t143 ^ 2;
      t181 = 0.1e1 / t144 / t179;
      t182 = t43 * t181;
      t183 = t166 * t182;
      t186 = t67 * t160;
      out_8_2 = t153 * (t169 - 0.3e1 / 0.2e1 * t166 * x_2 * t164 - t146 + t70 - 0.3e1 / 0.2e1 * t67 * x_2 * t11 - t21) * G - 0.3e1 / 0.2e1 * t183 * t159 - 0.3e1 / 0.2e1 * t186 * t159;
      t189 = -t166;
      t192 = 0.3e1 / 0.2e1 * t189 * x_1 * t164;
      t199 = t189 * t182;
      out_8_3 = t153 * (t192 - 0.3e1 / 0.2e1 * t189 * x_2 * t164 + t21) * G - 0.3e1 / 0.2e1 * t199 * t159;
      t208 = t94 * t160;
      out_8_4 = t153 * (-0.3e1 / 0.2e1 * t94 * x_2 * t11 + 0.3e1 / 0.2e1 * t96) * G - 0.3e1 / 0.2e1 * t208 * t159;
      t212 = -2 * y_3 + 2 * y_2;
      t214 = t212 * x_1 * t164;
      t223 = t212 * t182;
      t226 = t115 * t160;
      out_8_5 = t153 * (-0.3e1 / 0.2e1 * t115 * x_2 * t11 - 0.3e1 / 0.2e1 * t212 * x_2 * t164 + 0.3e1 / 0.2e1 * t117 + 0.3e1 / 0.2e1 * t214) * G - 0.3e1 / 0.2e1 * t223 * t159 - 0.3e1 / 0.2e1 * t226 * t159;
      t229 = -t212;
      t231 = t229 * x_1 * t164;
      t238 = t229 * t182;
      out_8_6 = t153 * (-0.3e1 / 0.2e1 * t229 * x_2 * t164 + 0.3e1 / 0.2e1 * t231) * G - 0.3e1 / 0.2e1 * t238 * t159;
      t246 = t152 * t44;
      t251 = (x_3 * t146 + x_3 * t37 - t155 - t50) * G;
      t252 = t152 * t62;
      t253 = t32 * t252;
      out_9_1 = -t246 * (-t146 + 0.3e1 / 0.2e1 * t32 * x_3 * t30 - t40) * G + 0.3e1 / 0.2e1 * t253 * t251;
      t262 = t181 * t44;
      t263 = t166 * t262;
      out_9_2 = -t246 * (0.3e1 / 0.2e1 * t166 * x_3 * t164 - t169 - t37) * G + 0.3e1 / 0.2e1 * t263 * t251;
      t275 = t80 * t252;
      t278 = t189 * t262;
      out_9_3 = -t246 * (0.3e1 / 0.2e1 * t189 * x_3 * t164 + t146 - t192 + 0.3e1 / 0.2e1 * t80 * x_3 * t30 + t37 - t86) * G + 0.3e1 / 0.2e1 * t275 * t251 + 0.3e1 / 0.2e1 * t278 * t251;
      t287 = t100 * t252;
      out_9_4 = -t246 * (0.3e1 / 0.2e1 * t100 * x_3 * t30 - 0.3e1 / 0.2e1 * t104) * G + 0.3e1 / 0.2e1 * t287 * t251;
      t296 = t212 * t262;
      out_9_5 = -t246 * (0.3e1 / 0.2e1 * t212 * x_3 * t164 - 0.3e1 / 0.2e1 * t214) * G + 0.3e1 / 0.2e1 * t296 * t251;
      t307 = t127 * t252;
      t310 = t229 * t262;
      out_9_6 = -t246 * (0.3e1 / 0.2e1 * t127 * x_3 * t30 + 0.3e1 / 0.2e1 * t229 * x_3 * t164 - 0.3e1 / 0.2e1 * t131 - 0.3e1 / 0.2e1 * t231) * G + 0.3e1 / 0.2e1 * t307 * t251 + 0.3e1 / 0.2e1 * t310 * t251;
      t314 = t13 * y_3 * t11;
      t320 = t32 * y_2 * t30;
      t325 = y_3 * t21;
      t328 = y_2 * t37;
      t330 = (-t21 * y_1 - t37 * y_1 + t325 + t328) * G;
      out_10_1 = t45 * (-0.3e1 / 0.2e1 * t13 * y_1 * t11 - 0.3e1 / 0.2e1 * t32 * y_1 * t30 + 0.3e1 / 0.2e1 * t314 + 0.3e1 / 0.2e1 * t320) * G - 0.3e1 / 0.2e1 * t57 * t330 - 0.3e1 / 0.2e1 * t64 * t330;
      t336 = t67 * y_3 * t11;
      out_10_2 = t45 * (-0.3e1 / 0.2e1 * t67 * y_1 * t11 + 0.3e1 / 0.2e1 * t336) * G - 0.3e1 / 0.2e1 * t77 * t330;
      t348 = t80 * y_2 * t30;
      out_10_3 = t45 * (-0.3e1 / 0.2e1 * t80 * y_1 * t30 + 0.3e1 / 0.2e1 * t348) * G - 0.3e1 / 0.2e1 * t90 * t330;
      t357 = 0.3e1 / 0.2e1 * t94 * y_3 * t11;
      t366 = 0.3e1 / 0.2e1 * t100 * y_2 * t30;
      out_10_4 = t45 * (t357 - 0.3e1 / 0.2e1 * t94 * y_1 * t11 - t21 - 0.3e1 / 0.2e1 * t100 * y_1 * t30 - t37 + t366) * G - 0.3e1 / 0.2e1 * t109 * t330 - 0.3e1 / 0.2e1 * t112 * t330;
      t376 = 0.3e1 / 0.2e1 * t115 * y_3 * t11;
      out_10_5 = t45 * (t376 - 0.3e1 / 0.2e1 * t115 * y_1 * t11 + t37) * G - 0.3e1 / 0.2e1 * t124 * t330;
      t390 = 0.3e1 / 0.2e1 * t127 * y_2 * t30;
      out_10_6 = t45 * (t21 - 0.3e1 / 0.2e1 * t127 * y_1 * t30 + t390) * G - 0.3e1 / 0.2e1 * t136 * t330;
      t402 = y_1 * t146;
      t406 = (-t146 * y_2 - t21 * y_2 + t325 + t402) * G;
      out_11_1 = t153 * (-0.3e1 / 0.2e1 * t13 * y_2 * t11 + 0.3e1 / 0.2e1 * t314) * G - 0.3e1 / 0.2e1 * t161 * t406;
      t410 = t166 * y_1 * t164;
      out_11_2 = t153 * (-0.3e1 / 0.2e1 * t67 * y_2 * t11 - 0.3e1 / 0.2e1 * t166 * y_2 * t164 + 0.3e1 / 0.2e1 * t336 + 0.3e1 / 0.2e1 * t410) * G - 0.3e1 / 0.2e1 * t183 * t406 - 0.3e1 / 0.2e1 * t186 * t406;
      t424 = t189 * y_1 * t164;
      out_11_3 = t153 * (-0.3e1 / 0.2e1 * t189 * y_2 * t164 + 0.3e1 / 0.2e1 * t424) * G - 0.3e1 / 0.2e1 * t199 * t406;
      out_11_4 = t153 * (t146 + t357 - 0.3e1 / 0.2e1 * t94 * y_2 * t11) * G - 0.3e1 / 0.2e1 * t208 * t406;
      t443 = 0.3e1 / 0.2e1 * t212 * y_1 * t164;
      out_11_5 = t153 * (t443 - 0.3e1 / 0.2e1 * t212 * y_2 * t164 - t146 + t376 - 0.3e1 / 0.2e1 * t115 * y_2 * t11 - t21) * G - 0.3e1 / 0.2e1 * t223 * t406 - 0.3e1 / 0.2e1 * t226 * t406;
      t459 = 0.3e1 / 0.2e1 * t229 * y_1 * t164;
      out_11_6 = t153 * (t459 - 0.3e1 / 0.2e1 * t229 * y_2 * t164 + t21) * G - 0.3e1 / 0.2e1 * t238 * t406;
      t477 = (t146 * y_3 + t37 * y_3 - t328 - t402) * G;
      out_12_1 = -t246 * (0.3e1 / 0.2e1 * t32 * y_3 * t30 - 0.3e1 / 0.2e1 * t320) * G + 0.3e1 / 0.2e1 * t253 * t477;
      out_12_2 = -t246 * (0.3e1 / 0.2e1 * t166 * y_3 * t164 - 0.3e1 / 0.2e1 * t410) * G + 0.3e1 / 0.2e1 * t263 * t477;
      out_12_3 = -t246 * (0.3e1 / 0.2e1 * t189 * y_3 * t164 + 0.3e1 / 0.2e1 * t80 * y_3 * t30 - 0.3e1 / 0.2e1 * t348 - 0.3e1 / 0.2e1 * t424) * G + 0.3e1 / 0.2e1 * t275 * t477 + 0.3e1 / 0.2e1 * t278 * t477;
      out_12_4 = -t246 * (-t146 + 0.3e1 / 0.2e1 * t100 * y_3 * t30 - t366) * G + 0.3e1 / 0.2e1 * t287 * t477;
      out_12_5 = -t246 * (0.3e1 / 0.2e1 * t212 * y_3 * t164 - t443 - t37) * G + 0.3e1 / 0.2e1 * t296 * t477;
      out_12_6 = -t246 * (0.3e1 / 0.2e1 * t229 * y_3 * t164 + t146 - t459 + 0.3e1 / 0.2e1 * t127 * y_3 * t30 + t37 - t390) * G + 0.3e1 / 0.2e1 * t307 * t477 + 0.3e1 / 0.2e1 * t310 * t477;

      % Store outputs
      out_Jf = zeros(12,12);
      out_Jf(1,7) = out_1_7;
      out_Jf(2,8) = out_2_8;
      out_Jf(3,9) = out_3_9;
      out_Jf(4,10) = out_4_10;
      out_Jf(5,11) = out_5_11;
      out_Jf(6,12) = out_6_12;
      out_Jf(7,1) = out_7_1;
      out_Jf(7,2) = out_7_2;
      out_Jf(7,3) = out_7_3;
      out_Jf(7,4) = out_7_4;
      out_Jf(7,5) = out_7_5;
      out_Jf(7,6) = out_7_6;
      out_Jf(8,1) = out_8_1;
      out_Jf(8,2) = out_8_2;
      out_Jf(8,3) = out_8_3;
      out_Jf(8,4) = out_8_4;
      out_Jf(8,5) = out_8_5;
      out_Jf(8,6) = out_8_6;
      out_Jf(9,1) = out_9_1;
      out_Jf(9,2) = out_9_2;
      out_Jf(9,3) = out_9_3;
      out_Jf(9,4) = out_9_4;
      out_Jf(9,5) = out_9_5;
      out_Jf(9,6) = out_9_6;
      out_Jf(10,1) = out_10_1;
      out_Jf(10,2) = out_10_2;
      out_Jf(10,3) = out_10_3;
      out_Jf(10,4) = out_10_4;
      out_Jf(10,5) = out_10_5;
      out_Jf(10,6) = out_10_6;
      out_Jf(11,1) = out_11_1;
      out_Jf(11,2) = out_11_2;
      out_Jf(11,3) = out_11_3;
      out_Jf(11,4) = out_11_4;
      out_Jf(11,5) = out_11_5;
      out_Jf(11,6) = out_11_6;
      out_Jf(12,1) = out_12_1;
      out_Jf(12,2) = out_12_2;
      out_Jf(12,3) = out_12_3;
      out_Jf(12,4) = out_12_4;
      out_Jf(12,5) = out_12_5;
      out_Jf(12,6) = out_12_6;
    end % Jf
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, t )
      % Calculate the residual of the invariants h.
      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);

      % Evaluate assignments
      % No assignments

      % Evaluate elements
      % No elements

      % Store outputs
      out_h = zeros(0,1);
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh = Jh( this, in_1, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      G = this.m_G;
      m_1 = this.m_m_1;
      m_2 = this.m_m_2;
      m_3 = this.m_m_3;

      % Extract inputs
      x_1 = in_1(1);
      x_2 = in_1(2);
      x_3 = in_1(3);
      y_1 = in_1(4);
      y_2 = in_1(5);
      y_3 = in_1(6);
      u_1 = in_1(7);
      u_2 = in_1(8);
      u_3 = in_1(9);
      v_1 = in_1(10);
      v_2 = in_1(11);
      v_3 = in_1(12);

      % Evaluate assignments
      % None

      % Evaluate function
      % None

      % Store outputs
      out_Jh = zeros(0,12);
    end % Jh
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % ThreeBodyProblem

% That's All Folks!

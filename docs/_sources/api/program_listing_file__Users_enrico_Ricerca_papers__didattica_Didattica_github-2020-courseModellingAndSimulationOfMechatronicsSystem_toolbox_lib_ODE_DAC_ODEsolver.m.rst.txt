
.. _program_listing_file__Users_enrico_Ricerca_papers__didattica_Didattica_github-2020-courseModellingAndSimulationOfMechatronicsSystem_toolbox_lib_ODE_DAC_ODEsolver.m:

Program Listing for File DAC_ODEsolver.m
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_enrico_Ricerca_papers__didattica_Didattica_github-2020-courseModellingAndSimulationOfMechatronicsSystem_toolbox_lib_ODE_DAC_ODEsolver.m>` (``/Users/enrico/Ricerca/papers/_didattica/Didattica/github-2020-courseModellingAndSimulationOfMechatronicsSystem/toolbox/lib/ODE/DAC_ODEsolver.m``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: MATLAB

   %
   % Matlab code for the Course:
   %
   %     Modelling and Simulation of Mechatronics System
   %
   % by
   % Enrico Bertolazzi
   % Dipartimento di Ingegneria Industriale
   % Universita` degli Studi di Trento
   % email: enrico.bertolazzi@unitn.it
   %
   classdef DAC_ODEsolver < handle
     properties (SetAccess = protected, Hidden = true)
       %> should contain the name of the numerical method used
       solverName; 
       %> the object storing the ODE
       odeClass;
     end
   
     methods (Abstract)
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       %>
       %> Generic advancing step for a generic numerical methods.
       %>
       %> given x0 = \f$ x(t_0) \f$ and a time step dt = \f$ \Delta t\f$
       %> return the approximation of \f$ x(t_0+\Delta t) \f$
       %>
       step( self, x0, t0, dt )
     end
   
     methods
       function self = DAC_ODEsolver( solverName )
         self.solverName = solverName;
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       %> return the name of the numerical method used to advance solution
       function name = getName( self )
         name = self.solverName
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       %> set the ODE class used in the advancing step
       function setODE( self, odeClass )
         self.odeClass = odeClass;
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       %
       %> compute approximate solution on a series of point given by the
       %> vector t = \f$ (t_0, t_1, \ldots, t_n) \f$
       %> starting at initial point x0 =  \f$ x_0 \f$
       %
       function x = advance( self, t, x0 )
         x      = zeros(length(x0),length(t));
         x(:,1) = x0(:);
         for k=1:length(t)-1
           x(:,k+1) = self.step( t(k), x(:,k), t(k+1)-t(k) );
         end
       end
     end
   end

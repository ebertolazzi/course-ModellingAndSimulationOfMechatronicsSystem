
.. _program_listing_file__Users_enrico_Ricerca_papers__didattica_Didattica_github-2020-courseModellingAndSimulationOfMechatronicsSystem_toolbox_lib_ODE_ODEbaseSolver.m:

Program Listing for File ODEbaseSolver.m
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_enrico_Ricerca_papers__didattica_Didattica_github-2020-courseModellingAndSimulationOfMechatronicsSystem_toolbox_lib_ODE_ODEbaseSolver.m>` (``/Users/enrico/Ricerca/papers/_didattica/Didattica/github-2020-courseModellingAndSimulationOfMechatronicsSystem/toolbox/lib/ODE/ODEbaseSolver.m``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: MATLAB

   %
   % Matlab code for the Course:
   %
   %     Modelling and Simulation of Mechatronics System
   %
   % by
   % Enrico Bertolazzi
   % Dipartimento di Ingegneria Industriale
   % Universita` degli Studi di Trento
   % email: enrico.bertolazzi@unitn.it
   %
   classdef ODEbaseSolver < handle
     properties (SetAccess = protected, Hidden = true)
       solverName; % should contain the name of the numerical method used
       odeClass;   % the object storing the ODE
     end
   
     methods (Abstract)
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       %
       %  step is a generic advancing step for a generic numerical methods
       %
       %  given x0 = x(t0) return the approximation of x(t0+dt)
       %
       step( self, x0, t0, dt )
     end
   
     methods
       function self = ODEbaseSolver( solverName )
         self.solverName = solverName;
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       function delete( self )
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       function name = getName( self )
         name = self.solverName
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       function setODE( self, odeClass )
         self.odeClass = odeClass;
       end
       % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       %
       %  compute approximate solution on a series of point given by the vector t
       %  starting at initial point x0
       %
       function x = advance( self, t, x0 )
         x      = zeros(length(x0),length(t));
         x(:,1) = x0(:);
         for k=1:length(t)-1
           x(:,k+1) = self.step( t(k), x(:,k), t(k+1)-t(k) );
         end
       end
     end
   end
